# -*- coding: utf-8 -*-
"""NumberTheoryAssigment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ipl_zu-cKtzpDHvCuSwtPVha8xFRNDh_
"""

#importing all the library for solving assignment 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sbs
import statistics
from scipy.stats import kurtosis

"""All the test cases for -   Mean/Median/Mode
(Mean-adding the numbers in a data set and dividing by the number of observations in the data set. The median is the middle number in a data set when the numbers are listed in either ascending or descending order
The mode is the value that appears most frequently in a data set)
"""

# 1st test case to find the mean
print("Finding mean using Function")
def mean_value(sample):
  return sum(sample) / len(sample)
a=mean_value([10, 20, 60, 5, 30, 25, 84, 94, 20, 50]) 
print(a)
print("\n")
# 2nd test case to find the mean
print("Finding mean using numpy library")
b=np.mean([10, 20, 60, 5, 30, 25, 84, 94, 20, 50]) 
print(b)
print("\n")
# 3rd test case to find the mean
print("Finding mean using statistics library")
c=statistics.mean([10, 20, 60, 5, 30, 25, 84, 94, 20, 50]) 
print(c)
print("\n")
# 4th test case to find the mean
print("Finding mean using given list function") 
n_num = [10, 20, 60, 5, 30, 25, 84, 94, 20, 50] 
n = len(n_num) 
  
get_sum = sum(n_num) 
d = get_sum / n 
print(d)
print("Mean  is: " + str(d))
print("\n")
# 5th test case to find the mean
print("Finding mean using user input")
list=eval(input("Enter list:"))
lenght=len(list)
mean=sum=0
for i in range (0,lenght):
  sum+=list[i]
mean=sum/lenght
print(mean)

# 1st test case to find the Median
print("Finding Median using Function")
def my_median(sample):
  n = len(sample)
  index = n // 2
  if n % 2:
    return sorted(sample)[index]
  return sum(sorted(sample)[index - 1:index + 1]) / 2
print(my_median([3, 5, 1, 4, 6]))
print("\n")
# 2nd test case to find the median
print("Finding median using numpy library")
b=np.median([10, 20, 60, 5, 30, 25, 84, 94, 20, 50]) 
print(b)
print("\n")
# 3rd test case to find the median
print("Finding median using statistics library")
c=statistics.median([10, 20, 60, 5, 30, 25, 84, 94, 20, 50]) 
print(c)
print("\n")

# 1st test case to find the Mode
print("Finding Mode using Function")
from collections import Counter
def my_mode(sample):
  c = Counter(sample)
  return [k for k, v in c.items() if v == c.most_common(1)[0][1]]
a=my_mode(["male", "male", "female", "male"])
['male']

b=my_mode(["few", "few", "many", "some", "many"])
['few', 'many']
print(a)
print(b)
print(my_mode([4, 1, 2, 2, 3, 5]))

print(my_mode([4, 1, 2, 2, 3, 5, 4]))
print('\n')
#2nd test case to find mode
# 2nd test case to find the median
print("Finding mode using numpy library")
c=statistics.mode([4, 1, 2, 2, 3, 5])
print(c)

"""Test cases for Kurtosis and why we use it

m2 is the variance, the square of the standard deviation. The kurtosis can also be computed as a4 = the average value of z4, where z is the familiar z-score, z = (x−x̅)/σ.
"""

data=[(10,20,30,40,50,60,70),(10,10,40,40,50,60,70),(10,20,30,50,50,60,80)]
dataframe=pd.DataFrame(data=data);
skewvalue=dataframe.skew(axis=1)
print(dataframe)
print(skewvalue)
#finding kurt and understanding how skewness is related to kurtosis
datamatrix=[(65,75,74,73,95,76,62,100),(101,102,103,107,157,160,191,192)]
dataframe=pd.DataFrame(data=datamatrix)
kurt=dataframe.kurt(axis=1)
print(dataframe)
print(kurt)
# 2nd test
# Graph using numpy.linspace() 
# finding kurtosis 

from scipy.stats import kurtosis 
import numpy as np 
import pylab as p 
x1 = np.linspace( -5, 5, 1000 ) 
y1 = 1./(np.sqrt(2.*np.pi)) * np.exp( -.5*(x1)**2 ) 
p.plot(x1, y1, '*') 

print(  kurtosis(y1)) 

print(kurtosis(y1, fisher = False)) 

print( kurtosis(y1, fisher = True))

"""Outlier is a data point that differs significantly from other observations. An outlier may be due to variability in the measurement or it may indicate experimental error"""

print('using function')
data = [1, 2, 2, 2, 3, 1, 1, 15, 2, 2, 2, 3, 1, 1, 2] 
mean = np.mean(data) 
std = np.std(data) 
print( mean) 
print( std) 
threshold = 3
outlier = [] 
for i in data: 
    z = (i-mean)/std 
    if z > threshold: 
        outlier.append(i) 
print( outlier)
print('using library')
# random data points to calculate z-score
data = [5, 5, 5, -99, 5, 5, 5, 5, 5, 5, 88, 5, 5, 5]
# calculate mean
mean = np.mean(data) 
# calculate standard deviation
sd = np.std(data)
# determine a threhold
threshold = 2
# create empty list to store outliers
outliers = []
# detect outlier
for i in data: 
    z = (i-mean)/sd # calculate z-score
    if abs(z) > threshold:  # identify outliers
        outliers.append(i) # add to the empty list
# print outliers    
print("The detected outliers are: ", outliers)

"""Correlation-(a statistic that measures the degree to which two variables move in relation to each)"""

#1st test case
print('Genrating value using random function and finding correlation')
X = np.random.randn(10)
Y = np.random.randn(10)
# Finding the corrlation matrix
C = np.corrcoef(X,Y)
print(C)
print('\n')
#2nd case
print('LOADING DATA SET')
from sklearn.datasets import load_breast_cancer
breast_cancer = load_breast_cancer()
data = breast_cancer.data
features = breast_cancer.feature_names
df = pd.DataFrame(data, columns = features)
print(df.shape)
print(features)
print('n')
print('finding to correlation using heatmap')
# taking all rows but only 6 columns
df_small = df.iloc[:,:6]
correlation_mat = df_small.corr()
sbs.heatmap(correlation_mat, annot = True)
plt.show()
#3rd case 
print('using library')
from numpy import corrcoef
x = array([1,2,3,4,5,6,7,8,9])
print(x)
y = array([9,8,7,6,5,4,3,2,1])
print(y)
Sigma = corrcoef(x,y)
print(Sigma)

""" Covariance Variance -(covariance is finding the variance of a sum of several random variables. In particular, if Z=X+Y, then Var(Z)=Cov(Z,Z)=Cov(X+Y,X+Y)=Cov(X,X)+Cov(X,Y)+Cov(Y,X)+Cov(Y,Y)=Var(X)+Var(Y)+2Cov(X, Y ))"""

# using fuction
print('using fuction')
def variance(data): 
  # Number of observations
  n = len(data)
  # Mean of the data 
  mean = sum(data) / n
  # Square deviations
  deviations = [(x - mean) ** 2 for x in data]
  # Variance
  variance = sum(deviations) / n
  return variance

b=variance([4, 8, 6, 5, 3, 2, 8, 9, 2, 5])
print(b)
print('\n')
print('using library')
a=statistics.variance([4, 8, 6, 5, 3, 2, 8, 9, 2, 5])
print(a)
print('\n')
print('using library')
from numpy import array
from numpy import var
v = array([1,2,3,4,5,6])
print(v)
result = var(v, ddof=1)
print(result)

#covariance
print('using library')
from numpy import cov
x = array([1,2,3,4,5,6,7,8,9])
print(x)
y = array([9,8,7,6,5,4,3,2,1])
print(y)
Sigma = cov(x,y)[0,1]
print(Sigma)
print('using library')
from numpy import cov
x = array([1,2,3,4,5,6,7,8,9])
print(x)
y = array([9,8,7,6,5,4,3,2,1])
print(y)
Sigma = cov(x,y)
print(Sigma)

"""Standard Deviation -(The standard deviation is calculated as the square root of variance by determining each data point's deviation relative to the mean. If the data points are further from the mean, there is a higher deviation within the data set; thus, the more spread out the data, the higher the standard deviation)"""

#1st case
import math
print('using fuction')
def variance(data, ddof=0):
  n = len(data)
  mean = sum(data) / n
  return sum((x - mean) ** 2 for x in data) / (n - ddof)
def stdev(data):
  var = variance(data)
  std_dev = math.sqrt(var)
  return std_dev

a=stdev([4, 8, 6, 5, 3, 2, 8, 9, 2, 5])
print(a)
print('n')
# 2nd case
print('using inbuilt function')
def stdev(data, ddof=0):
  return math.sqrt(variance(data, ddof))
b=stdev([4, 8, 6, 5, 3, 2, 8, 9, 2, 5])
print(b)
print('\n')
#3rd case
print('using library')
c=statistics.stdev([4, 8, 6, 5, 3, 2, 8, 9, 2, 5])
print(c)

"""Finding all test cases for histogram-( A histogram displays the shape and spread of continuous sample data.)"""

#1st test case
print("Finding histogram using matplotlib library")
x=[1,12,22,21,20,21,31,2,32,40,14,
   33,50,44,45,46,44,46,47,43,
   42,41,40,43,45,43,44,61,13,58,
   71,24,58,56,56,65,45,56,85,56]
plt.hist(x)
plt.xlabel('number')
plt.ylabel('count')
plt.title('number and count')
plt.show()

#2nd test case 
print('Uing seaborn library for drawing histogram')
df = sbs.load_dataset('iris') # loaing data set 
sbs.distplot(df['petal_length'],kde = False)
plt.show()

# 3rd case 
print('Drawingg gistogram using range fuction')
size, scale = 1000, 10
commutes = pd.Series(np.random.gamma(scale, size=size) ** 1.5)

commutes.plot.hist(grid=True, bins=20, rwidth=0.9)
plt.title('Commute Times for 1,000 Commuters')
plt.xlabel('Counts')
plt.ylabel('Commute Time')
plt.grid(axis='y', alpha=0.75)

#4th case
print('making special case like assign particulare coloum with diffrent colour to see the pattern')
bars = plt.bar([1, 2, 3, 4], [1, 4, 9, 16])
bars[0].set_color('green')
plt.show()

#5th case 
print('making graph verticle to see the table acurate')
plt.rcdefaults() 
fig, ax = plt.subplots()
personen = ('Sujeet', 'Mithlesh', 'Vikash', 'Baby', 'Abhinav')
y_pos = np.arange(len(personen))
cups = (15, 22, 24, 39, 12)
ax.barh(y_pos, cups, align='center',color='green', ecolor='black')
ax.set_yticks(y_pos) # ticks are use to mark 
ax.set_yticklabels(personen)
ax.invert_yaxis()  # using invert function to make histogram invert
ax.set_xlabel('Cups')
ax.set_title('Coffee Consumption')
plt.show()